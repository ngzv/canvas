/* 音频波纹、涟漪效果 */
/* 使用:
 * 1. 在 `body` 的 `#id` 元素中添加 `#launch` 元素
 * 元素结构:
 * `<div id="launch">
 *   <div class="launch-loader">
 *     <span></span>
 *     <span></span>
 *     <span></span>
 *     <span></span>
 *     <span></span>
 *     <span></span>
 *     <span></span>
 *     <span></span>
 *     <span></span>
 *   </div>
 *   <p class="launch-text">资源正在加载中..</p>
 * </div>`
 * 2. 在 `head` 中对当前文件进行引用
 * `<link rel="stylesheet" type="text/css" href="/css/ripple.css" />`
 * 3. 加载完成后,在 `body` 的 `script` 标签内添加 `loaded` 类名进行卸载
 * `/// 等待DOM和Vue应用加载完成
 * document.addEventListener('DOMContentLoaded', () => {
 *   /// 监听Vue应用挂载完成
 *   const checkAppLoaded = setInterval(() => {
 *     const app = document.querySelector('#app');
 *     if (app && app.children.length > 0) {
 *       /// 应用已加载，隐藏动画
 *       document.getElementById('launch').classList.add('loaded');
 *       clearInterval(checkAppLoaded);
 *     }
 *   }, 100);
 *   /// 安全超时机制，防止动画无限显示
 *   setTimeout(() => {
 *     document.getElementById('launch').classList.add('loaded');
 *   }, 6000);
 * });`
 */
html,
body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

#launch {
  width: 100vw;
  height: 100vh;
  background-color: #1A2A3A;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  /* 添加过渡动画，与JavaScript中的300ms淡出延迟匹配 */
  transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.launch-loader {
  width: 135px;
  height: 100px;
  display: flex;
}

.launch-loader span {
  width: 8px;
  height: 100px;
  border-radius: 16px;
  margin-right: 8px;
  /* 通用动画：所有条共用一个动画逻辑 */
  animation: barMove 2s infinite linear;
}

.launch-loader span:nth-child(1) {
  /* 时间递增，参差不齐的效果 */
  --color: #F677B0;
  animation-delay: 0.2s;
}

.launch-loader span:nth-child(2) {
  --color: #dF7FF2;
  animation-delay: 0.4s;
}

.launch-loader span:nth-child(3) {
  --color: #8C7FF2;
  animation-delay: 0.6s;
}

.launch-loader span:nth-child(4) {
  --color: #7FD0F2;
  animation-delay: 0.8s;
}

.launch-loader span:nth-child(5) {
  --color: #7FF2D3;
  animation-delay: 1.0s;
}

.launch-loader span:nth-child(6) {
  --color: #7FF2A0;
  animation-delay: 1.2s;
}

.launch-loader span:nth-child(7) {
  --color: #ADF27F;
  animation-delay: 1.4s;  
}

.launch-loader span:nth-child(8) {
  --color: #E7F27F;
  animation-delay: 1.6s;
}

.launch-loader span:nth-child(9) {
  --color: #ECAA64;
  animation-delay: 1.8s;
}

/* 通用动画：通过变量获取颜色 */
@keyframes barMove {
  0% {
    background: var(--color);
    margin-top: 25%;
    height: 10%;
  }
  50% {
    background: var(--color);
    height: 100%;
    margin-top: 0%;
  }
  100% {
    background: var(--color);
    height: 10%;
    margin-top: 25%;
  }
}

/* 加载文本 */
.launch-text {
  color: #D1D1D1;
  font-size: 13px;
  font-weight: 400;
  letter-spacing: 0.5px;
  /* 初始状态：完全透明 */
  opacity: 0;
  /* 定义动画：1秒内从透明变为不透明 */
  animation: fadeIn 0.3s forwards;
  /* 延迟1秒执行动画 */
  animation-delay: 0.5s;
}

@keyframes fadeIn {
  from {
    opacity: 0; /* 开始时透明 */
  }
  to {
    opacity: 1; /* 结束时完全显示 */
  }
}

/* 加载完成后的隐藏效果 */
#launch.loaded {
  opacity: 0;
  pointer-events: none;
  /* 确保动画完成后立即不再占用空间 */
  position: absolute;
  z-index: -1;
}